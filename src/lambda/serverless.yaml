# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

#plugins: # need to npm install these plugins for serverless to work
 #- serverless-python-requirements # To dockerize and package lambda python requirements
 #- serverless-plugin-tracing # To check active tracing plugin for lambda functions

service: 
  name: lina-slswrapper

custom:
  personStreamArn:  arn:aws:dynamodb:us-east-1:222572804561:table/person/stream/2020-03-02T20:14:53.639
  lambdaTopic: ${self:service.name}-LambdaSNSTopic
  lambdaTopicArn: ${self:service.name}-LambdaTopicArn
  s3ObjectCreateTopic: ${self:service.name}-S3ObjectCreateSNSTopic
  s3ObjectCreateTopicArn: ${self:service.name}-S3ObjectCreateTopicArn
  storageBucketName: ${self:service.name}-datafile


provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  tracing: true
  timeout: 300
  memorySize: 256 
  stackTags:
    app_name: slswrapper
    app_group: lina
  iamRoleStatements:
    - Effect: Allow 
      Action:
        - s3:GetBucketVersioning
        - s3:ListBucket
        - s3:CreateBucket
        - s3:ListBucketVersions
        - s3:PutBucketVersioning
        - s3:GetBucketLocation
        - s3:ListBucketMultipartUploads
        - s3:ListMultipartUploadParts
        - s3:GetObject*
        - s3:PutObject*
        - s3:DeleteObject
        - s3:AbortMultipartUpload
      Resource: arn:aws:s3:::gogo-dash*
    - Effect: Allow # To perform instrumentation
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow # For Instrumentation
      Action:
        - cloudwatch:PutMetricData 
      Resource: "*"
    - Effect: Allow # For Lambda calls
      Action:
        - lambda *
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow # for SNS Topics
      Action:
        - sns:*
      Resource:
        - "arn:aws:sns:*:*:*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:*:*:table/*

package:
  individually: true
  
functions:
  ListenerLambda:
    name: ${self:service.name}-ListenerLambda
    handler: main
    runtime: go1.x
    description: publish Person into sns topic
    memorySize: 3008
    environment:
     LAMBDA_TOPIC_ARN:
        Fn::Join :
          - ':'
          - - 'arn:aws:sns'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - '${self:custom.lambdaTopic}'

    events:
      - stream:  #DynamoDB Stream
          type: dynamodb
          arn: ${self:custom.personStreamArn}
    package:
      artifact: listenerlambda.zip
    tags:
      Owner: nwlf53@gmail.com
      Project: listner lambda
      app_name: listenerLambda
      app_group: lina

  TopicsubscriberLambda:
    name: ${self:service.name}-topicsubscriberLambda
    handler: main
    runtime: go1.x
    description: Read SNS topic and create S3 Object
    memorySize: 3008
    timeout: 900
    environment:
      OUTPUT_S3_BUCKET: ${self:custom.storageBucketName}
      CLOUD_ENVIRONMENT: ${self:provider.stage}
      
    events:
      - sns:
          topicName: ${self:custom.lambdaTopic}
          displayName:  SNS Topic created from Lambda

    package:
      artifact: topicsubscriberLambda.zip
    tags:
      Owner: nwlf53@gmail.com
      Project: topic subscriber lambda
      app_name: topicsubscriberLambda
      app_group: lina

  LambdaTriggeredByS3Event:
    name: ${self:service.name}-${self:provider.stage}-LambdaTriggeredByS3Event
    handler: main
    runtime: go1.x
    description: Read the  file that was inserted to s3 bucket
    memorySize: 3008
    timeout: 900
    environment:
      INPUT_S3_BUCKET: ${self:custom.storageBucketName}
    package:
      artifact: lambdaTriggeredByS3Event.zip
    tags:
      Owner: nwlf53@gmail.com
      Project: Subscribe to Topic published by S3:ObjectCreated event
      app_name: lambdaTriggeredByS3Event
      app_group: lina


resources:
  Resources:
    S3ObjectCreateTopic:
      Type: AWS::SNS::Topic
    S3ObjectCreateTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AllowBucketToPushNotificationEffect
              Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: S3ObjectCreateTopic

    DataFileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.storageBucketName}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic: !Ref S3ObjectCreateTopic
        Tags:
          - 
            Key: "app_group"
            Value: "lina"
          - 
            Key: "app_name"
            Value: "topicsubscriberLambda"

    S3ObjectCreateTopicSubscription: #logical name
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt: [ LambdaTriggeredByS3EventLambdaFunction, "Arn" ] #lambda reference by ARN, by default serverless generates logical names by concatenating FunctionName with "LambdaFunction"
        Protocol: lambda #protocol to invoke endpoint
        TopicArn: ${self:custom.s3ObjectCreateTopicArn}
    LambdaTriggeredByS3EventLambdaFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        Principal: sns.amazonaws.com
        SourceArn: ${self:custom.s3ObjectCreateTopicArn}
        FunctionName:
          Fn::GetAtt: [ LambdaTriggeredByS3EventLambdaFunction, "Arn" ]
  Outputs:
    LambdaTopicArn:
      Description: Arn of Lambda Topic
      Value: ${self:custom.lambdaTopic}
      Export:
        Name: ${self:custom.lambdaTopicArn}
    S3ObjectCreateTopicArn:
      Description: Arn of s3ObjectCreate Topic
      Value: !Ref s3ObjectCreateTopic
      Export:
        Name: ${self:custom.s3ObjectCreateTopicArn}
